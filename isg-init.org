
  |--------------+-------------+--------------------------------------------------|
  | Section      | Key         | Command                                          |
  |--------------+-------------+--------------------------------------------------|
  | Search       | C-s         | Counsel grep (C-y = search current word)         |
  |              | C-r         | counsel-rg                                       |
  |              | C-M-s       | isearch forward                                  |
  |              | C-M-r       | isearch backward                                 |
  |              | C-M-g       | counsel-git-grep                                 |
  |              | C-c C-o     | print search results into new buffer             |
  |              | C-x C-q     | ivy-wgrep-change-to-wgrep-mode                   |
  |              | C-c C-c     | commit changes made in wgrep mode                |
  |              | C-c f       | hydra show counsel options                       |
  | Registers    | C-x r space | Save current position to register                |
  |              | C-x r u     | Save current buffer state to register            |
  |              | C-x r U     | Restore buffer state from register               |
  | Org Mode     | C-c C-c     | Eval code within BEGIN_SRC/END_SRC blocks        |
  |              | C-c '       | Open up a mini-buffer for editing the code block |
  | Highlighting | C-h .       | highlight-symbol-at-point                        |
  |              | C-h r       | remove highlights                                |
  |              | C-h h       | highlight-regexp                                 |
  |              | C-h p       | highlight-phrase and choose colour               |
  |--------------+-------------+--------------------------------------------------|

  Tramp mode and Eshell
  $ cd /indy.io:/home/indy

  End of line conversions
  M-x set-buffer-file-coding-system utf-8-unix (for LF)
  M-x set-buffer-file-coding-system utf-8-mac (for CR)
  M-x set-buffer-file-coding-system utf-8-dos (for CR+LF)

  Using an Emacs counter in a keyboard macro definition
  C-(
  press f3 to insert a 0
  C-)
  the 0 in subsequent invocations will be replaced with the next integer

* package
  https://github.com/jwiegley/use-package

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (setcdr (last package-archives)
          '(("melpa-stable" . "https://stable.melpa.org/packages/")
            ("melpa" . "https://melpa.org/packages/")))

  (package-initialize) ; most of this section's time is spent here
  (setq package-check-signature nil)

  (unless (package-installed-p 'use-package)
    ;; check for new packages (package versions)
    (message "%s" "Emacs Prelude is now refreshing its package database...")
    (package-refresh-contents)
    (message "%s" " done.")
    (package-install 'use-package))

  ;(require 'use-package)

  ;; after use-package-always-ensure is set, all subsequent use-package
  ;; statements will download packages if needed
  (setq use-package-always-ensure t)
  (setq use-package-verbose t)
#+END_SRC

* cl and external load paths

#+BEGIN_SRC emacs-lisp
(require 'cl)
(push "~/.emacs.d/external" load-path)  ; third party code that isn't in melpa-stable yet
#+END_SRC

* pomidor
  | key   | command              |
  |-------+----------------------|
  | Enter | Start new pomodoro.  |
  | Space | Start a break.       |
  | R     | Resets the timer.    |
  | q     | Quit pomidor buffer. |
  | Q     | Turns off pomidor.   |

#+BEGIN_SRC emacs-lisp
(require 'pomidor)
(setq pomidor-sound-tick nil
      pomidor-sound-tack nil
      pomidor-sound-overwork nil)
(global-set-key (kbd "<f12>") #'pomidor)
#+END_SRC

* helper functions
#+BEGIN_SRC emacs-lisp
  ;;; display 'fn' as the lambda symbol
  (defun pretty-fn nil
    (font-lock-add-keywords
     nil `(("(\\(fn\\>\\)"
            (0 (progn (compose-region (match-beginning 1) (match-end 1)
                                      ,(make-char 'greek-iso8859-7 107))
                      nil)))
           ("\\(#\\)("
            (0 (progn (compose-region (match-beginning 1) (match-end 1)
                                      402)
                      nil))))))

  (defun isg/val (property)
    (get 'isg/local property))

  (defun isg/start-shell (shell-name)
    "start a new shell"
    (interactive "sShell name: ")
    (shell)
    (if (string= "" shell-name)
        (rename-uniquely)
      (rename-buffer shell-name)))

  (defun isg/unicode-symbol (name)
    "Translate a symbolic name for a Unicode character -- e.g., LEFT-ARROW
         or GREATER-THAN into an actual Unicode character code. "
    (decode-char 'ucs (case name
                        (left-arrow 8592)
                        (up-arrow 8593)
                        (right-arrow 8594)
                        (down-arrow 8595)
                        (double-vertical-bar #X2551)
                        (equal #X003d)
                        (not-equal #X2260)
                        (identical #X2261)
                        (not-identical #X2262)
                        (less-than #X003c)
                        (greater-than #X003e)
                        (less-than-or-equal-to #X2264)
                        (greater-than-or-equal-to #X2265)
                        (logical-and #X2227)
                        (logical-or #X2228)
                        (logical-neg #X00AC)
                        ('nil #X2205)
                        (horizontal-ellipsis #X2026)
                        (double-exclamation #X203C)
                        (prime #X2032)
                        (double-prime #X2033)
                        (for-all #X2200)
                        (there-exists #X2203)
                        (element-of #X2208)
                        (square-root #X221A)
                        (squared #X00B2)
                        (cubed #X00B3)
                        (lambda #X03BB)
                        (alpha #X03B1)
                        (beta #X03B2)
                        (gamma #X03B3)
                        (delta #X03B4))))

  (defun isg/substitute-pattern-with-unicode (pattern symbol)
    "Add a font lock hook to replace the matched part of PATTERN with the
         Unicode symbol SYMBOL looked up with UNICODE-SYMBOL."
    (font-lock-add-keywords
     nil `((,pattern
            (0 (progn (compose-region (match-beginning 1) (match-end 1)
                                      ,(isg/unicode-symbol symbol)
                                      'decompose-region)
                      nil))))))

  (defun isg/substitute-patterns-with-unicode (patterns)
    "Call SUBSTITUTE-PATTERN-WITH-UNICODE repeatedly."
    (mapcar #'(lambda (x)
                (isg/substitute-pattern-with-unicode (car x)
                                                     (cdr x)))
            patterns))
#+END_SRC

* machine settings
  split this into multiple source blocks to avoid a lot of git conflicts

#+BEGIN_SRC emacs-lisp
  (defun isg/default-machine-settings ()
    "Settings which apply to most of the machines."
    '((foreground-color "grey60")
      (background-color "black")
      (default-font "6x12")
      (machine-os "linux") ; one of "linux" "osx" "windows"
      (url-opener "chromium-browser")
      (save-folder "/tmp/emacs.d-saves")
      (deft-directory "~/work/deft")
      (gcal-file "~/notes/gcal.org")
      (racer-cmd "/home/indy/code/rust/racer/target/release/racer")
      (racer-rust-src-path "/home/indy/code/rust/rust/src/")
      (get-extra-paths (lambda ()
                         (list (concat (getenv "HOME") "/local/bin")
                               "/usr/local/bin"
                               "/usr/local/go/bin")))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defvar isg/config-windows-home-pc
    '((default-font "-outline-Courier New-normal-normal-normal-mono-13-*-*-*-c-*-fontset-startup")
      (machine-os "windows") ; one of "linux" "osx" "windows"
      (racer-cmd "C:\\Users\\indy\\bin\\racer.exe")
      (racer-rust-src-path "c:\\Users\\indy\\.rustup\\toolchains\\nightly-x86_64-pc-windows-msvc\\lib\\rustlib\\src\\rust\\src\\")
      (save-folder "d:/scratch/emacs-saves")
      (url-opener "C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome")
      (deft-directory "d:/Google Drive/Docs/notes/deft")
      (gcal-file "D:\\Google Drive\\Docs\\notes\\gcal.org")
      (frame-l ((top . 0) (left . 600) (width . 120) (height . 87)))
      (frame-r ((top . 0) (left . 1575) (width . 120) (height . 87)))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defvar isg/config-chromebook
    '((default-font "-unknown-Inconsolata-normal-normal-normal-*-12-*-*-*-m-0-iso10646-1")
      (post-setup-fn (lambda ()
                       (setenv "GOPATH" (concat (getenv "HOME") "/work/go"))))
      (get-extra-paths (lambda ()
                         (list (concat (getenv "GOPATH") "/bin")
                               (concat (getenv "HOME") "/local/bin")
                               "/usr/local/bin")))
      (frame-l ((top . 0) (left . 210) (width . 80) (height . 59)))
      (frame-r ((top . 0) (left . 780) (width . 80) (height . 59)))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defvar isg/config-macbook-air
    '((default-font "-apple-Inconsolata-medium-normal-normal-*-12-*-*-*-m-0-iso10646-1")
      (machine-os "osx")
      ;;(racer-cmd "/Users/indy/code/rust/racer/target/release/racer")
      (racer-cmd "/Users/indy/.cargo/bin/racer")
      (racer-rust-src-path "/Users/indy/code/rust/rust/src/")
      (url-opener "open")
      (deft-directory "~/work/deft")

      (frame-r ((top . 0) (left . 746) (width . 100) (height . 55)))
      (frame-l ((top . 0) (left . 126) (width . 100) (height . 55)))

      ;;(frame-r ((top . 0) (left . 864) (width . 80) (height . 55)))
      ;;(frame-l ((top . 0) (left . 362) (width . 80) (height . 55)))

      (post-setup-fn (lambda ()
                       (setq inferior-lisp-program "lein repl")))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun isg/machine-settings ()
    "System specific overrides go here."
    (cond
     ((string-match "^BERTRAND"  system-name) isg/config-windows-home-pc)
     ((string-match "^localhost" system-name) isg/config-chromebook)
     ((string-match "^ernesto"   system-name) isg/config-macbook-air)))

  (cl-labels ((load-settings (which)
                             (mapcar (lambda (pair)
                                       (put 'isg/local (car pair) (cadr pair)))
                                     which)))
    (load-settings (isg/default-machine-settings))
    (load-settings (isg/machine-settings)))
#+END_SRC


** obsolete machine settings
((string-match "^debian" system-name)  ; debian vm on ernesto
      '((post-setup-fn (lambda ()
                         (setq x-super-keysym 'meta)))))

     ((string-match "^che" system-name)  ; asus ul20a
      '((post-setup-fn (lambda ()
                         (setenv "GOPATH" (concat (getenv "HOME") "/scratch/go"))))
        (get-extra-paths (lambda ()
                           (list (concat (getenv "GOPATH") "/bin")
                                 (concat (getenv "HOME") "/local/bin")
                                 "/usr/local/bin"
                                 "/usr/local/go/bin")))
        ;; "/home/indy/code/rust/racer/target/release"

        (key-setup (([mouse-1] . nil)
                    ([double-mouse-1] . nil)
                    ([drag-mouse-1] . nil)
                    ([down-mouse-1] . nil)))))


     ((string-match "^raul" system-name)  ; eee 1000
      '((hyperspec-root "file:////home/user/docs/cl/HyperSpec/")
        ;; (default-font "-unknown-DejaVu Sans Mono-normal-normal-normal-*-20-*-*-*-m-0-fontset-startup")
        (post-setup-fn (lambda ()
                         (setenv "PATH"
                                 (concat
                                  (concat (getenv "HOME") "/local/bin:")
                                  "/usr/local/bin:"
                                  (getenv "PATH")))
                         ;;(isg/start-shell "default-shell")
                         (switch-to-buffer "*scratch*")))


        (frame-r ((top . 1) (left . 5) (width . 80) (height . 46)))
        (frame-l ((top . 0) (left . 509) (width . 80) (height . 46)))

        (key-setup (([mouse-1] . nil) ; accidently touching touchpad won't shift cursor
                    ([double-mouse-1] . nil)
                    ([drag-mouse-1] . nil)
                    ([down-mouse-1] . nil)))))


     ((string-match "^blue" system-name) ; G5 iMac at home
      '((default-font "-apple-andale mono-medium-r-normal--0-0-0-0-m-0-mac-roman")
        (machine-os "osx")
        (save-folder "~/.emacs.d/saves")
        (frame-r ((top . 20) (left . 320) (width . 80) (height . 71)))
        (frame-l ((top . 20) (left . 902) (width . 80) (height . 71)))))

     ((string-match "^GOSHCC" system-name)  ; GOSH PC
      '(
        (default-font "-outline-Courier New-normal-normal-normal-mono-13-*-*-*-c-*-fontset-startup")
        (machine-os "windows") ; one of "linux" "osx" "windows"
        (save-folder "~/emacs-saves")
        (post-setup-fn (lambda ()
                         (find-file "k:/Direct Marketing/Data Analyst/indy/notes/done.org")
                         (find-file "k:/Direct Marketing/Data Analyst/indy/notes/notes.org")
                         (find-file "k:/Direct Marketing/Data Analyst/indy/notes/tasks.org")))

        (frame-r ((top . 0) (left . 0) (width . 80) (height . 60)))
        (frame-l ((top . 20) (left . 510) (width . 80) (height . 60)))))


     ((equal system-name "green")         ; old laptop thrown out by orange
      '((hyperspec-root "file:///usr/share/common-lisp/isg/hyperspec/HyperSpec/")))


  ;; Windows
  ;; default font: "file:///usr/share/common-lisp/isg-hyperspec/HyperSpec/"
  ;; inferior lisp: "C:\\home\\bin\\sbcl\\sbcl.exe"
  ;; (post-setup-fn (lambda ()
  ;; ((setq exec-path (append exec-path '("c:\\home\\bin\\emacs-22.1\\bin")))
  ;; (load-file "~/.emacs.d/site-lisp/external/gnuserv.el")
  ;; (gnuserv-start)
  ;; (setq gnuserv-frame(selected-frame)))))


* essential packages
** magit
 #+BEGIN_SRC emacs-lisp
 (use-package magit
   :pin melpa-stable
   :commands magit-status
   :init
   (global-set-key "\C-cv" 'magit-status)
   (global-set-key "\C-c\C-v" 'magit-status)
   :config
   (setq magit-push-always-verify nil))
 #+END_SRC
** org
#+BEGIN_SRC emacs-lisp
 (use-package org
   :pin gnu
   :demand t)

 ;;; org-mode
 (defun soft-wrap-lines ()
   "Make lines wrap at window edge and on word boundary, in current buffer."
   (interactive)
   (setq truncate-lines nil)
   (setq word-wrap t))
 (add-hook 'org-mode-hook 'soft-wrap-lines)
#+END_SRC

 <2017-05-15 Mon>
 http://cestlaz.github.io/posts/using-emacs-26-gcal/
 https://www.youtube.com/watch?v=vO_RF2dK7M0
 https://github.com/myuhe/org-gcal.el

 test by calling: org-gcal-fetch

#+BEGIN_SRC emacs-lisp
  (use-package org-gcal
    :pin melpa-stable
    :ensure t
    :config
    (setq org-gcal-client-id "897993881430-kugvdc95cl65l7ungcfb4c25eoqgu9gm.apps.googleusercontent.com"
          org-gcal-client-secret "A1Z-3mRQXkbwczp3mnewdKUK"
          org-gcal-file-alist '())
    (add-to-list 'org-gcal-file-alist (cons "inderjit.gill@gmail.com" (isg/val 'gcal-file)))
    (add-hook 'org-agenda-mode-hook (lambda () (org-gcal-sync)))
    (add-hook 'org-capture-after-finalize-hook (lambda () (org-gcal-sync))))
#+END_SRC


** hydra
 #+BEGIN_SRC emacs-lisp
 (use-package hydra
   :pin melpa-stable
   :ensure t
   :config
   (setq hydra-lv nil)) ;use echo area
 #+END_SRC

** ivy + swiper + counsel

   ivy is a completion framework
   - It provides an interface to list, search, filter and perform actions on a collection of "things". These "things" can range from strings to buffers, Ivy doesn't really care. It just provides a way for the user to interact with this collection.

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :pin melpa-stable
    :demand t
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t
          ivy-count-format "%d/%d "))

  (use-package swiper
    :pin melpa-stable)

  (use-package counsel
    :pin melpa-stable
    :init
    (global-set-key (kbd "C-M-s") 'isearch-forward)
    (global-set-key (kbd "C-M-r") 'isearch-backward)

    (global-set-key (kbd "M-x") 'counsel-M-x)

    (global-set-key (kbd "M-x") 'counsel-M-x)
    ;; C-s copies the current symbol into the clipboard before starting counsel-grep
    (global-set-key (kbd "C-s")
                    (lambda ()
                      (interactive)
                      (if (buffer-file-name)
                          ;; this is a buffer that can be saved to disk and counsel-grep'd
                          (progn
                            (save-buffer)
                            (kill-new (format "%s" (or (thing-at-point 'symbol) "")))
                            (counsel-grep))
                        ;; otherwise stick to the normal isearch-forward
                        (isearch-forward))))

    (global-set-key (kbd "C-r")
                    (lambda ()
                      (interactive)
                      (counsel-rg (format "%s" (or (thing-at-point 'symbol) "")))))

    (global-set-key (kbd "C-M-g")
                    (lambda ()
                      (interactive)
                      (counsel-git-grep nil
                                        (format "%s" (or (thing-at-point 'symbol) "")))))

    (global-set-key (kbd "C-x C-f") 'counsel-find-file)

    ;; use the hydra equivalents instead (C-c f ...)
    ;;
    ;; (global-set-key (kbd "C-x C-g") 'counsel-git)
    ;; (global-set-key (kbd "C-x C-r") 'counsel-rg)

    ;; I don't use these bindings - should learn what they do one day
    ;; (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history))


  (defhydra isg/hydra-counsel (:hint nil :color pink)
    "
      Counsel search
      ----------------------------------------------------
      _r_: ripgrep  _f_: find file _g_: git
      _u_: function _v_: variable  _l_: library _s_: symbol
      "
    ("f" counsel-find-file)
    ("g" counsel-git)
    ("r" (lambda ()
           (interactive)
           (counsel-rg (format "%s" (or (thing-at-point 'symbol) "")))))
    ("u" counsel-describe-function)
    ("v" counsel-describe-variable)
    ("l" counsel-find-library)
    ("s" counsel-info-lookup-symbol)
    ("RET" nil "done" :color blue))

  (bind-keys ("C-c f"  . isg/hydra-counsel/body))
   #+END_SRC

** company - auto completion
#+BEGIN_SRC emacs-lisp

  (use-package company
    :pin melpa-stable
    :defer t
    :config
    (progn
      ;; Reduce the time after which the company auto completion popup opens
      ;; Reduce the number of characters before company kicks in
      (setq company-idle-delay 0.8
            company-minimum-prefix-length 3
            company-show-numbers t
            company-require-match nil
            company-tooltip-align-annotations t
            company-tooltip-margin 1
            company-echo-delay 0
            company-dabbrev-downcase nil
            company-minimum-prefix-length 1
            company-selection-wrap-around t
            company-transformers '(company-sort-by-occurrence
                                   company-sort-by-backend-importance))
      (push (apply-partially #'cl-remove-if
                             (lambda (c) (string-match-p "\\`[0-9]+[f]*\\'" c)))
            company-transformers)
      (define-key company-active-map (kbd "C-n") 'company-select-next)
      (define-key company-active-map (kbd "C-p") 'company-select-previous)))

#+END_SRC

** ibuffer
#+BEGIN_SRC emacs-lisp
  (defalias 'list-buffers 'ibuffer)

  (setq ibuffer-saved-filter-groups
        (quote (("default"
                 ("dired" (mode . dired-mode))
                 ("c" (mode . c-mode))
                 ("seni" (mode . seni-mode))
                 ("rust" (mode . rust-mode))
                 ("js" (mode . js2-mode))
                 ("go" (mode . go-mode))
                 ("glsl" (mode . glsl-mode))
                 ("org" (mode . org-mode))
                 ("web" (or
                         (mode . html-mode)
                         (mode . css-mode)))
                 ("emacs" (or
                           (name . "^\\*scratch\\*$")
                           (name . "^\\*Messages\\*$"))))))
        ibuffer-show-empty-filter-groups nil)

  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-switch-to-saved-filter-groups "default")))
#+END_SRC

* language modes
** c
 #+BEGIN_SRC emacs-lisp
   (add-hook 'c-mode-hook (lambda ()
                            ;;(add-to-list (make-local-variable 'company-backends) 'company-clang)
                            (setq comment-start "// "
                                  comment-end   "")
                            (highlight-thing-mode)))
   ;; company-racer company-bbdb company-nxml company-css company-eclim company-semantic company-clang company-xcode company-cmake company-capf company-files (company-dabbrev-code company-gtags company-etags company-keywords) company-oddmuse company-dabbrev
 #+END_SRC
** clojure
   #+BEGIN_SRC emacs-lisp
 (use-package cider
   :pin melpa-stable
   :defer t
   :init
   (add-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
 (use-package clojure-mode
   :pin melpa-stable
   :mode "\\.clj\\'"
   :config
   (define-key clojure-mode-map (kbd ")") 'sp-up-sexp)
   (pretty-fn))

 (setq nrepl-hide-special-buffers t)
   #+END_SRC
** csharp
 #+BEGIN_SRC emacs-lisp
 (use-package csharp-mode
   :pin melpa-stable
   :mode "\\.cs\\'"
   :init
   :config
   (setq default-tab-width 4))
 #+END_SRC
** css
   #+BEGIN_SRC emacs-lisp
     (use-package css-mode
       :pin melpa-stable
       :mode (("\\.css\\'" . css-mode)
              ("\\.less\\'" . css-mode))
       :config
       (use-package rainbow-mode)
       (add-hook 'css-mode-hook 'rainbow-mode)
       (setq css-indent-offset 2))
     (add-to-list 'auto-mode-alist '("\\.less$" . css-mode))
   #+END_SRC
** dart
 #+BEGIN_SRC emacs-lisp
 (use-package dart-mode
   :pin melpa-stable
   :mode "\\.dart\\'"
   :config
   (setq dart-enable-analysis-server t))




 #+END_SRC

** elm


  | key     | elm-repl                          |
  |---------+-----------------------------------|
  | C-c C-l | load the current file in a REPL   |
  | C-c C-p | push the current region to a REPL |


  #+BEGIN_SRC emacs-lisp
    (use-package elm-mode
      :pin melpa-stable
      :mode "\\.elm\\'"
      :config
      (add-hook 'elm-mode-hook
                (lambda ()
                  (add-to-list (make-local-variable 'company-backends) 'company-elm)))

      (add-hook 'elm-mode-hook #'elm-oracle-setup-completion)

      ;; this line is a HACK so that auto-completion will work on Windows
      ;; TODO: find the root cause of this issue
      ;;
      ;;(elm-oracle--get-completions-cached "List.a"))
      )
  #+END_SRC

** glsl
 #+BEGIN_SRC emacs-lisp
 (use-package glsl-mode
   :mode (("\\.glsl\\'" . glsl-mode)
          ("\\.vert\\'" . glsl-mode)
          ("\\.frag\\'" . glsl-mode)
          ("\\.geom\\'" . glsl-mode))
   :init
   (autoload 'glsl-mode "glsl-mode" nil t))
 #+END_SRC
** go
 #+BEGIN_SRC emacs-lisp
 (use-package go-mode
   :pin melpa-stable
   :mode "\\.go\\'"
   :config
   (add-hook 'before-save-hook #'gofmt-before-save))
 #+END_SRC
** groovy
 #+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.gradle$" . groovy-mode))
 #+END_SRC
** haskell
   https://commercialhaskell.github.io/intero/

#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :mode "\\.hs\\'"
    :init
    (add-hook 'haskell-mode-hook 'intero-mode))
#+END_SRC


** javascript
 #+BEGIN_SRC emacs-lisp
 (use-package js2-mode
   :pin melpa-stable
   :mode (("\\.js\\'" . js2-mode)
          ("\\.es6\\'" . js2-mode))
   :init
   (use-package js-comint :defer t)
   (add-hook 'js2-mode-hook 'ws-butler-mode)
   :config
   (setq js2-basic-offset 2)
   (setq js-indent-level 2)
   (setq js2-global-externs '("require" "expect" "describe" "it" "beforeEach"))
   (define-key js2-mode-map (kbd "<tab>") #'company-indent-or-complete-common))
 #+END_SRC

** jsx
 #+BEGIN_SRC emacs-lisp
 (use-package web-mode
   :pin melpa-stable
   :mode (("\\.jsx\\'" . web-mode)
          ("\\.tsx\\'" . web-mode))
   :init
   (add-hook 'web-mode-hook 'ws-butler-mode)
   ;;(when (string-equal "tsx" (file-name-extension buffer-file-name))
   ;;(setup-tide-mode))
   (defadvice web-mode-highlight-part (around tweak-jsx activate)
     (if (equal web-mode-content-type "jsx")
         (let ((web-mode-enable-part-face nil))
           ad-do-it)
       ad-do-it)))
 #+END_SRC
** markdown
 #+BEGIN_SRC emacs-lisp
 (use-package markdown-mode
   :pin melpa-stable
   :mode (("\\.md\\'" . markdown-mode)
          ("\\.markdown\\'" . markdown-mode)))
 #+END_SRC

** nim
 #+BEGIN_SRC emacs-lisp
 (use-package nim-mode
   :mode "\\.nim\\'")
 #+END_SRC

** purescript
#+BEGIN_SRC emacs-lisp
  (use-package purescript-mode
    :mode "\\.purs\\'"
    :config
    (use-package psc-ide)
    (add-hook 'purescript-mode-hook 'setup-purescript-mode))

  (defun substitute-purescript-syntax-with-unicode ()
    (isg/substitute-patterns-with-unicode
     (list (cons "\\(<-\\)" 'left-arrow)
           (cons "\\(->\\)" 'right-arrow)
           (cons "\\(/=\\)" 'not-equal)
           (cons "\\(()\\)" 'nil)
           (cons "\\<\\(forall\\)\\>" 'for-all)
           (cons "\\(&&\\)" 'logical-and)
           (cons "\\(||\\)" 'logical-or)
           (cons "\\<\\(not\\)\\>" 'logical-neg)
           (cons "\\(>\\)\\[^=\\]" 'greater-than)
           (cons "\\(<\\)\\[^=\\]" 'less-than)
           (cons "[^>]\\(>=\\)" 'greater-than-or-equal-to) ; substitute >= but ignore >>=
           (cons "\\(<=\\)" 'less-than-or-equal-to)
           (cons "\\(''\\)" 'double-prime)
           (cons "\\('\\)" 'prime))))

  (defun setup-purescript-mode ()
    (interactive)
    (psc-ide-mode)
    (company-mode)
    (flycheck-mode)
    (turn-on-purescript-indentation)
    (substitute-purescript-syntax-with-unicode))
#+END_SRC

   purescript syntax:
   | <>  | string concatenation  |
   | $   | infix apply           |
   | <<< | backwards composition |
   | >>> | forwards composition  |
   | >>= | bind                  |
   | =>  | double arrow          |
   |     |                       |

   emacs psc-ide mode:
   https://github.com/epost/psc-ide-emacs
   | C-c C-s | start server                                             |
   | C-c C-q | quit server                                              |
   | C-c C-b | rebuild the current module and get quick error reporting |
   | C-c C-t | show type for identifier under cursor                    |
   | C-c C-l | load all modules                                         |
   | M-.     | go to definition                                         |
   | M-,     | jump back                                                |
   | C-c C-i | add an import for the identifier under cursor            |
   | C-c C-c | case split the given type under cursor (really cool)     |
   | C-c C-a | add a clause for the function definition under cursor    |

   - make sure that the purescript project has been compiled.
   - after loading up a purescript file for the first time press C-c C-s to start the server

   pulp commands:
   | pulp init                    | sets up a folder                       |
   | pulp repl                    | type :? to see commands                |
   | pulp build                   |                                        |
   | pulp --psc-package build     | use psc-package for package management |
   | pulp build -O --to output.js | apply dead code elimination            |
   | pulp run                     |                                        |
   | pulp browserify              | prints code to stdout                  |

   repl:
   | :paste | enter multi-line input mode |
   | C-d    | exit multi-line input mode  |
   | :type  | shows type of an expression |
   | :kind  | shows the kind of a type    |
   | :r     | reload imported modules     |

   psc-package:
   https://github.com/purescript/psc-package

   psc-package commands
   | init      | create psc-package.json file        |
   | available | lists available packages            |
   | install   | $ psc-package install console       |
   | update    | update dependencies                 |
   | updates   | check all packages for new releases |

   $ mkdir hello_world
   $ cd hello_world
   $ psc-package init
   $ psc-package available
   $ psc-package install psci-support
   $ psc-package install lists
   $ psc-package install console

   <2017-09-28 Thu>
   https://github.com/purescript/psc-package/issues/34
   a lot of the psc-package commands fail on windows
   but if we're working with a pre-existing project then we can get by with using pulp


   bower:
   NOT RECOMMENDED - try to use psc-package instead
   $ bower install purescript-math --save


   flare is an easy to use library, easy to make cool interactive graphs
   pux - similar to the Elm architecture, Interactive React debugger can be wired in
   halogen - the hardest to understand library

   read purescript by example
   try out Pux or Flare
   come on #purescript on freenode
   video meetup
   try out Halogen

** ruby
 #+BEGIN_SRC emacs-lisp
 (add-to-list 'auto-mode-alist '("Rakefile" . ruby-mode))
 #+END_SRC
** rust
   http://julienblanchard.com/2016/fancy-rust-development-with-emacs/

   cargo.el is a minor mode which allows us to run cargo commands from emacs like:
   | key         | command     |
   |-------------+-------------|
   | C-c C-c C-b | cargo build |
   | C-c C-c C-r | cargo run   |
   | C-c C-c C-t | cargo test  |

#+BEGIN_SRC emacs-lisp
    ;; from: https://christian.kellner.me/2017/05/31/language-server-protocol-lsp-rust-and-emacs/
    ;; (use-package rust-mode
    ;;   :mode "\\.rs\\'"
    ;;   :init
    ;;   (setq rust-format-on-save t))
    ;; (use-package lsp-mode
    ;;   :init
    ;;   (add-hook 'prog-mode-hook 'lsp-mode)
    ;;   :config
    ;;   (use-package lsp-flycheck
    ;;     :ensure f ; comes with lsp-mode
    ;;     :after flycheck))
    ;; (use-package lsp-rust
    ;;   :after lsp-mode)

  (use-package company-racer
    :defer t)

  (use-package rust-mode
    :mode "\\.rs\\'"
    :config
    (use-package cargo)
    (use-package flycheck-rust
      :config
      (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))
    (use-package racer
      :init
      (setq racer-cmd (isg/val 'racer-cmd)
            racer-rust-src-path (isg/val 'racer-rust-src-path))
      :config
      (add-hook 'racer-mode-hook #'eldoc-mode))

    (add-hook 'rust-mode-hook
              '(lambda ()
                 (racer-mode)
                 (add-to-list (make-local-variable 'company-backends) 'company-racer)
                 (cargo-minor-mode)
                 ;; Key binding to jump to method definition
                 (local-set-key (kbd "M-.") #'racer-find-definition)
                 (local-set-key (kbd "<tab>") #'company-indent-or-complete-common)
                 (local-set-key (kbd "C-c <tab>") #'rust-format-buffer)
                 )))


#+END_SRC

** scheme
 #+BEGIN_SRC emacs-lisp
 (add-hook 'scheme-mode-hook
           (lambda ()
             (define-key scheme-mode-map (kbd ")") 'sp-up-sexp)))
 #+END_SRC
** seni
 #+BEGIN_SRC emacs-lisp
 (autoload 'seni-mode "seni" nil t)
 (add-to-list 'auto-mode-alist '("\\.seni$" . seni-mode))
 (add-hook 'seni-mode-hook 'smartparens-strict-mode)
 (add-hook 'seni-mode-hook
           (lambda ()
             (define-key seni-mode-map (kbd ")") 'sp-up-sexp)))

 #+END_SRC
** shader-mode
 #+BEGIN_SRC emacs-lisp
 (use-package shader-mode
   :mode "\\.shader\\'"
   :config
   (setq shader-indent-offset 2))
 #+END_SRC
** sql
 #+BEGIN_SRC emacs-lisp
 (add-to-list 'auto-mode-alist
              '("\\.sql$" . (lambda ()
                              (sql-mode)
                              (sql-highlight-postgres-keywords))))
 (add-to-list 'auto-mode-alist
              '("\\.psql$" . (lambda ()
                              (sql-mode)
                              (sql-highlight-postgres-keywords))))
 #+END_SRC
** toml-mode
 #+BEGIN_SRC emacs-lisp
 (use-package toml-mode
   :mode "\\.toml\\'")
 #+END_SRC
** typescript

|-----+---------------------------------------------------------------|
| key | description                                                   |
|-----+---------------------------------------------------------------|
| M-. | Jump to definition. With prefix arg, Jump to type definition. |
| M-, | Return to your pre-jump position.                             |
|-----+---------------------------------------------------------------|

|---------------------------------+--------------------------------------------------------|
| function                        | description                                            |
|---------------------------------+--------------------------------------------------------|
| M-x tide-restart-server         | Restart tsserver. to pickup tsconfig.json changes      |
| M-x tide-documentation-at-point | Show documentation for the symbol at point.            |
| M-x tide-references             | List all references to the symbol at point in a buffer |
| M-x tide-project-errors         | List all errors in the project                         |
| M-x tide-rename-symbol          | Rename all occurrences of the symbol at point.         |
| M-x tide-format                 | Format the current region or buffer.                   |
| M-x tide-fix                    | Apply code fix for the error at point.                 |
|---------------------------------+--------------------------------------------------------|


 #+BEGIN_SRC emacs-lisp
 (use-package typescript-mode
   :pin melpa-stable
   :mode "\\.ts\\'"
   :config
   (use-package tide)
   (add-hook 'typescript-mode-hook 'setup-tide-mode))

 (defun setup-tide-mode ()
   (interactive)
   (tide-setup)
   (flycheck-mode t)
   (setq flycheck-check-syntax-automatically '(save mode-enabled))
   (eldoc-mode t)
   ;; company is an optional dependency. You have to
   ;; install it separately via package-install
   (company-mode t)
   (setq company-tooltip-align-annotations t)
   (tide-hl-identifier-mode +1))

 #+END_SRC

* theming

  [[http://www.greghendershott.com/2017/02/emacs-themes.html]]



#+BEGIN_SRC emacs-lisp
(defun isg/disable-all-themes ()
  (interactive)
  (mapc #'disable-theme custom-enabled-themes))

(defvar isg/theme-hooks nil
  "((theme-id . function) ...)")

(defun isg/add-theme-hook (theme-id hook-func)
  (add-to-list 'isg/theme-hooks (cons theme-id hook-func)))

(defun isg/load-theme-advice (f theme-id &optional no-confirm no-enable &rest args)
  "Enhances `load-theme' in two ways:
1. Disables enabled themes for a clean slate.
2. Calls functions registered using `isg/add-theme-hook'."
  (unless no-enable
    (isg/disable-all-themes))
  (prog1
      (apply f theme-id no-confirm no-enable args)
    (unless no-enable
      (pcase (assq theme-id isg/theme-hooks)
        (`(,_ . ,f) (funcall f))))))

(advice-add 'load-theme
            :around
            #'isg/load-theme-advice)

(use-package color-theme
  :defer t)

(use-package color-theme-sanityinc-solarized
  :pin melpa-stable
  :defer t)

(use-package material-theme
  :pin melpa-stable
  :defer t)

(use-package dracula-theme
  :pin melpa-stable
  :defer t)

(use-package base16-theme
  :ensure t)

(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
(load-theme 'actress t)

(defhydra isg/hydra-themes (:hint nil :color pink)
  "
Themes
----------------------------------------------------
_A_: Actress _M_: Material       _S_: Solarized
_D_: Dracula _m_: Material Light _s_: Solarized light
_DEL_: none
"
  ("A" (load-theme 'actress t))
  ("D" (load-theme 'dracula t))
  ("s" (load-theme 'sanityinc-solarized-light t))
  ("S" (load-theme 'sanityinc-solarized-dark t))
  ("M" (load-theme 'material t))
  ("m" (load-theme 'material-light t))
  ("DEL" (isg/disable-all-themes))
  ("RET" nil "done" :color blue))

(bind-keys ("C-c w t"  . isg/hydra-themes/body))

#+END_SRC

* misc helper packages
** avy - moving the cursor by searching
 #+BEGIN_SRC emacs-lisp
 (use-package avy
   :pin melpa-stable
   :bind ("M-h" . avy-goto-char-timer))
 #+END_SRC

** deft
 #+BEGIN_SRC emacs-lisp
 (use-package deft
   :pin melpa-stable
   :commands deft
   :config
   (setq deft-directory (isg/val 'deft-directory)
         deft-extension "org"
         deft-text-mode 'org-mode
         deft-use-filename-as-title t
         deft-auto-save-interval 5.0))
 #+END_SRC

** eshell

 #+BEGIN_SRC emacs-lisp
   (defun isg/start-eshell (shell-name)
     "SHELL-NAME the name of the shell."
     (interactive "sEshell name: ")
     (eshell)
     (if (string= "" shell-name)
         (rename-uniquely)
       (rename-buffer shell-name)))
   ;;; access server via ssh in eshell with:
   ;;; $ cd /ssh:indy.io:

   (add-hook 'eshell-mode-hook 'my-eshell-hook)
   (defun my-eshell-hook ()
     (company-mode -1))

 #+END_SRC

** exec-path-from-shell
 #+BEGIN_SRC emacs-lisp
 ;; have to ensure that this is run at startup so that 'cargo' can be
 ;; found when in rust mode and also so that the eshell works as expected
 ;;
 (use-package exec-path-from-shell
   :pin melpa-stable
     :ensure t
     :demand t
     :config
     ;; (exec-path-from-shell-copy-env "TWITTER_CONSUMER_KEY")
     ;; (exec-path-from-shell-copy-env "TWITTER_CONSUMER_SECRET")
     ;; (exec-path-from-shell-copy-env "TWITTER_ACCESS_TOKEN")
     ;; (exec-path-from-shell-copy-env "TWITTER_ACCESS_TOKEN_SECRET")
     (if (not (string-equal (isg/val 'machine-os) "windows"))
         (exec-path-from-shell-copy-env "GOPATH"))
         ;; (exec-path-from-shell-setenv "RUST_SRC_PATH" (isg/val 'racer-rust-src-path))
     (when (memq window-system '(mac ns))
       (exec-path-from-shell-initialize)))
 #+END_SRC

** flycheck
 #+BEGIN_SRC emacs-lisp
   ;; setting up flycheck for eslint checks using instructions from:
   ;; http://codewinds.com/blog/2015-04-02-emacs-flycheck-eslint-jsx.html
   ;;
   ;; C-c ! l : see full list of errors
   ;; C-c ! n : next error
   ;; C-c ! p : previous error
   (use-package flycheck
     :pin melpa-stable
     :config
     (use-package pkg-info
       :pin melpa-stable
       :defer t)
     (setq-default flycheck-disabled-checkers
                   (list 'json-jsonlist
                         'javascript-jshint ;; disable jshint since we prefer eslint checking
                         'emacs-lisp-checkdoc))

     ;; use eslint with web-mode for jsx files
     (flycheck-add-mode 'javascript-eslint 'web-mode)
     ;; (setq flycheck-eslintrc "~/work/seni-web/.eslintrc.json")
     ;; customize flycheck temp file prefix
     (setq-default flycheck-temp-prefix ".flycheck"))
 #+END_SRC

** highlight thing
 #+BEGIN_SRC emacs-lisp
 (use-package highlight-thing
   :config
   (setq highlight-thing-delay-seconds 0.5)
   (setq highlight-thing-exclude-thing-under-point t))
 #+END_SRC

** smartparens-config
 #+BEGIN_SRC emacs-lisp
 (use-package smartparens-config
   :pin melpa-stable
   :ensure smartparens
   :defer t
   :init
   (smartparens-global-mode t)
   (show-smartparens-global-mode t)
   (mapc (lambda (mode)
           (add-hook (intern (format "%s-hook" (symbol-name mode))) 'smartparens-strict-mode))
         sp--lisp-modes)
   ;; Conveniently set keys into the sp-keymap, limiting the keybinding to buffers
   ;; with SP mode activated
   (mapc (lambda (info)
           (let ((key (kbd (car info)))
                 (function (car (cdr info))))
             (define-key sp-keymap key function)))
         '(("C-)" sp-up-sexp)
           ("M-s" sp-splice-sexp)

           ;; ("C-M-f" sp-forward-sexp)
           ;; ("C-M-b" sp-backward-sexp)

           ;; ("C-M-d" sp-down-sexp)
           ;; ("C-M-a" sp-backward-down-sexp)
           ;; ("C-S-a" sp-beginning-of-sexp)
           ;; ("C-S-d" sp-end-of-sexp)

           ;; ("C-M-e" sp-up-sexp)

           ;; ("C-M-u" sp-backward-up-sexp)
           ;; ("C-M-t" sp-transpose-sexp)

           ;; ("C-M-n" sp-next-sexp)
           ;; ("C-M-p" sp-previous-sexp)

           ;; ("C-M-k" sp-kill-sexp)
           ;; ("C-M-w" sp-copy-sexp)

           ;; ("M-<delete>" sp-unwrap-sexp)
           ;; ("M-<backspace>" sp-backward-unwrap-sexp)

           ;; ("C-<right>" sp-forward-slurp-sexp)
           ;; ("C-<left>" sp-forward-barf-sexp)
           ;; ("C-M-<left>" sp-backward-slurp-sexp)
           ;; ("C-M-<right>" sp-backward-barf-sexp)

           ;; ("C-M-<delete>" sp-splice-sexp-killing-forward)
           ;; ("C-M-<backspace>" sp-splice-sexp-killing-backward)
           ;; ("C-S-<backspace>" sp-splice-sexp-killing-around)

           ;; ("C-]" sp-select-next-thing-exchange)
           ;; ("C-<left_bracket>" sp-select-previous-thing)
           ;; ("C-M-]" sp-select-next-thing)

           ;; ("M-F" sp-forward-symbol)
           ;; ("M-B" sp-backward-symbol)

           ;; ("H-t" sp-prefix-tag-object)
           ;; ("H-p" sp-prefix-pair-object)
           ;; ("H-s c" sp-convolute-sexp)
           ;; ("H-s a" sp-absorb-sexp)
           ;; ("H-s e" sp-emit-sexp)
           ;; ("H-s p" sp-add-to-previous-sexp)
           ;; ("H-s n" sp-add-to-next-sexp)
           ;; ("H-s j" sp-join-sexp)
           ;; ("H-s s" sp-split-sexp)
           ))
   ;; This is from authors config, seems to let you jump to the end of the current
   ;; sexp with paren?
   (define-key emacs-lisp-mode-map (kbd ")") 'sp-up-sexp)
   ;; (define-key scheme-mode-map (kbd ")") 'sp-up-sexp)
   ;; (define-key clojure-mode-map (kbd ")") 'sp-up-sexp)
   )
 #+END_SRC


** undo-tree

   http://www.dr-qubit.org/undo-tree/undo-tree.el

  | key     | description                           |
  |---------+---------------------------------------|
  | C-x u   | undo-tree-visualize                   |
  | C-x r u | Save current buffer state to register |
  | C-x r U | Restore buffer state from register    |

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :init
    (global-undo-tree-mode)
    :config
    ;; (global-set-key (kbd "<left>") 'undo-tree-undo)
    ;; (global-set-key (kbd "<right>") 'undo-tree-redo)
    )
#+END_SRC

** wgrep
 #+BEGIN_SRC emacs-lisp
 (use-package wgrep
   :demand t)
 #+END_SRC

** which key
 #+BEGIN_SRC emacs-lisp
 (use-package which-key
   :pin melpa-stable
   :demand t
   :config
   (which-key-mode))
 #+END_SRC

** ws-butler
 #+BEGIN_SRC emacs-lisp
 (use-package ws-butler
   :pin melpa-stable
   :defer t)
 #+END_SRC

* global settings
#+BEGIN_SRC emacs-lisp
  (defun isg/frame-setup ()
    (when (and (isg/val 'frame-r) (isg/val 'frame-l))
      (setq initial-frame-alist (isg/val 'frame-r)
            default-frame-alist (isg/val 'frame-l)))
    (add-to-list 'default-frame-alist
                 (cons 'font
                       (isg/val 'default-font))))

  (defun isg/run-machine-function (property)
    (let ((fn (isg/val property)))
      (if fn (funcall fn))))

  ;; Make sure it uses UTF-8 across the board
  (prefer-coding-system 'utf-8)
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (setq locale-coding-system 'utf-8)
  (setq default-file-name-coding-system 'utf-8)
  (when (display-graphic-p)
    (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))

  (isg/frame-setup)
  (isg/run-machine-function 'post-setup-fn)

  (autoload 'zap-up-to-char "misc"
    "Kill up to, but not including ARGth occurrence of CHAR." t)

  ;; give buffers unique names
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'post-forward)

  (global-auto-revert-mode t) ; reload files that have been changed outside of emacs
  (show-paren-mode t)
  (global-font-lock-mode t)
  (transient-mark-mode t) ; highlight selected text region

  (fset 'yes-or-no-p 'y-or-n-p)
  (setq-default font-lock-maximum-decoration t)
  (setq-default indent-tabs-mode nil)
  (blink-cursor-mode 0)
  (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
  (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (if (fboundp 'menu-bar-mode) (menu-bar-mode -1))

  (if (not (file-exists-p (isg/val 'save-folder)))
      (make-directory (isg/val 'save-folder)))

  (when (fboundp 'windmove-default-keybindings)
    (windmove-default-keybindings))
  (when (fboundp 'winner-mode)
    (winner-mode 1))

  (setq ring-bell-function (lambda () (message "*beep*"))
        browse-url-browser-function 'browse-url-generic
        browse-url-generic-program (isg/val 'url-opener)
        standard-indent 2
        create-lockfiles nil        ; don't create lockfiles
        x-select-enable-clipboard t
        x-select-enable-primary t
        save-interprogram-paste-before-kill t
        apropos-do-all t
        mouse-yank-at-point t
        require-final-newline t
        visible-bell t
        ediff-window-setup-function 'ediff-setup-windows-plain
        line-move-visual nil
        line-number-mode t
        european-calendar-style t
        display-time-24hr-format t
        default-tab-width 2
        column-number-mode t
        enable-local-variables nil  ; ignore local variables defined in files
        inhibit-startup-message t
        initial-scratch-message nil
        backup-by-copying t         ; don't clobber symlinks
        delete-old-versions t
        kept-new-versions 6
        kept-old-versions 2
        version-control t           ; use versioned backups
        create-lockfiles nil
        backup-directory-alist `((".*" . ,temporary-file-directory))
        auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))

    ;;; os specific settings
  (cond
   ((string-match "osx" (isg/val 'machine-os))
    (setq
     mac-command-modifier 'meta
     default-directory "~/"
     multi-term-program "/bin/bash")

    (fset 'insertPound "#")
    (global-set-key (kbd "C-M-3") 'insertPound))
   ((string-match "linux" (isg/val 'machine-os))
    (setq
     default-directory "~/"
     multi-term-program "/bin/bash")))

  (new-frame)

  ;; the standard set of company backends
  (setq company-backends '(company-semantic company-dabbrev-code company-dabbrev company-keywords))

  ;; turn on flychecking globally
  (add-hook 'after-init-hook #'global-flycheck-mode)
  (add-hook 'after-init-hook 'global-company-mode)

  (require 'tramp)
  (if (eq system-type 'windows-nt)
      (setq tramp-default-method "plinkx"))

  ;; C-c   == user defined prefixes
  ;; C-c w == window related functions

  (defhydra isg/hydra-text-scale (:hint nil :color pink)
    "
    Text Scale
    ----------------------------------------------------
    _g_: greater
    _l_: lesser
    "
    ("g" text-scale-increase)
    ("l" text-scale-decrease)
    ("RET" nil "done" :color blue))

  (bind-keys ("C-c w s"  . isg/hydra-text-scale/body))
#+END_SRC

* global key settings
#+BEGIN_SRC emacs-lisp
  ;;; use winner mode keys for undo/redo operations on window configurations
  ;;; C-c left
  ;;; C-c right
  (global-set-key "\C-w"     'backward-kill-word)
  (global-set-key "\C-x\C-k" 'kill-region)
  (global-set-key "\C-c\C-k" 'kill-region)
  (global-set-key "\M-0" 'other-frame)
  (global-set-key "\M-o" 'other-window)
  (global-set-key "\M-m" 'call-last-kbd-macro)
  (global-set-key "\M-j" 'eval-print-last-sexp)

  (global-set-key (kbd "M-z") 'zap-up-to-char)

  (global-set-key "\C-c\C-f" 'flymake-mode)

  (global-set-key (kbd "C-M-;") 'comment-region)

  (global-set-key "\M-7" 'isg/start-shell)
  (global-set-key "\M-8" 'isg/start-eshell)

  (global-set-key (kbd "C-M-p") 'scroll-down-line)
  (global-set-key (kbd "C-M-n") 'scroll-up-line)

  (global-set-key "\M-n" 'forward-paragraph)
  (global-set-key "\M-p" 'backward-paragraph)
  (global-set-key (kbd "C-<return>") 'electric-newline-and-maybe-indent)

  (defun isg/machine-set-keys ()
    "set machine specific key bindings"
    (mapcar (lambda (kons)
              (global-set-key (car kons) (cdr kons)))
            (isg/val 'key-setup)))
  (isg/machine-set-keys)                 ; machine specific key bindings
#+END_SRC
